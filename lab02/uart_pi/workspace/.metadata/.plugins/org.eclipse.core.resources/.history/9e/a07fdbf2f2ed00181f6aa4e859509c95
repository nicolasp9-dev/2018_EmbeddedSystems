#include "uartDrivers.h"
#include "system.h"
#include <string.h>


int read(char * values, int numberMaxToRead){
	if(IORD_32DIRECT(HOMEMADE_UART_BASE, (3<<2)) == 0) return 0;
	int i = 0;
	int pointer = 0;
	do{
		values[pointer] = IORD_32DIRECT(HOMEMADE_UART_BASE, (1<<2));
		pointer++;
		for(i = 0; i < 10000; i++);
	} while((IORD_32DIRECT(HOMEMADE_UART_BASE, (3<<2)) == 1) && (pointer < (numberMaxToRead-1)));
	values[pointer] = '\0';
	return pointer+1;
}

void write(char* toWrite, int numberOfCharacters){
	int i;
	for(i=0; i < numberOfCharacters; i++){
		IOWR_32DIRECT(HOMEMADE_UART_BASE, (2<<2),toWrite[i]);
	}
}

void writeString(char* toWrite){
	return write(toWrite, strlen(toWrite));
}

int canRead(){
	return IORD_32DIRECT(HOMEMADE_UART_BASE, (3<<2));
}

int setupWithNumber(int wordLength, int rate, int parity){
	if(wordLength > 7) return 0;
	if(rate > 15) return 0;
	if(parity > 1) return 0;
	int toWrite = (wordLength<<0) + (parity<<3) + (rate<<4);
	IOWR_32DIRECT(HOMEMADE_UART_BASE, (1<<2),toWrite);
	return 1;
}

int setup(int wordLength, int rate, int parity){
	int wordLengthNew = 0;
	int rateNew = 0;

	switch(wordLength){
	case 8 :
		wordLengthNew = 0;
		break;
	case 7 :
		printf("WordLength of 7 not available\n");
		return 0;
	case 9 :
		printf("WordLength of 9 not available\n");
		return 0;
	default:
		printf("Unknown wordLength\n");
		return 0;
	}

	switch(rate){
	case 9600 :
		rateNew = 0;
		break;
	case 115200 :
		rateNew = 1;
		break;
	case 57600 :
		rateNew = 2;
		break;
	case 38400 :
		rateNew = 3;
		break;
	case 19200 :
		rateNew = 4;
		break;
	case 4800 :
		rateNew = 5;
		break;
	case 2400 :
		rateNew = 6;
		break;
	case 1200 :
		rateNew = 7;
		break;
	default :
		printf("Unknown rate\n");
		return 0;
	}
	setupWithNumber(wordLengthNew, rateNew, parity);
	return 1;
}


